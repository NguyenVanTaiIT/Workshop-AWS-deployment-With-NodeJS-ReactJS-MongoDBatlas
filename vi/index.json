[
{
	"uri": "https://nguyenvantaiit.github.io/Workshop-AWS-deployment-With-NodeJS-ReactJS-MongoDBatlas/vi/1-introduce/",
	"title": "Giới thiệu",
	"tags": [],
	"description": "",
	"content": "Workshop này giới thiệu về việc theo dõi và giám sát end-to-end của ứng dụng thương mại điện tử Node.js + React sử dụng các dịch vụ AWS như X-Ray, CloudWatch, Secrets Manager và Elastic Beanstalk. Bạn sẽ học cách theo dõi các yêu cầu của người dùng qua các dịch vụ, trực quan hóa các điểm nghẽn về độ trễ, gỡ lỗi logic backend và quản lý bảo mật các bí mật ứng dụng—tất cả trong AWS.\nChúng ta sẽ sử dụng MongoDB Atlas để lưu trữ cơ sở dữ liệu, Amazon S3 để tải lên hình ảnh và Elastic Beanstalk để triển khai. Frontend (React Vite) và backend (Node.js với Express) được tích hợp với AWS X-Ray SDK, cung cấp khả năng hiển thị sâu vào hiệu suất ứng dụng và tương tác dịch vụ.\nNhững lợi ích chính bạn sẽ đạt được từ workshop này: Hiểu cách AWS X-Ray theo dõi các yêu cầu qua các API backend và thao tác cơ sở dữ liệu. Học cách quản lý bí mật môi trường một cách an toàn bằng AWS Secrets Manager. Tự động hóa triển khai bằng Elastic Beanstalk và giám sát các chỉ số sức khỏe qua CloudWatch. Trực quan hóa traces và gỡ lỗi nhanh chóng bằng AWS Application Signals. Thay thế logging thủ công truyền thống bằng distributed tracing có cấu trúc. Khám phá các ví dụ thực tế: danh sách sản phẩm, tải lên hình ảnh, đặt hàng và xem traces của chúng theo thời gian thực. Đến cuối workshop, bạn sẽ xây dựng và triển khai một ứng dụng thương mại điện tử full-stack với các phương pháp tốt nhất về tracing và monitoring—sẵn sàng để mở rộng và sản xuất.\n"
},
{
	"uri": "https://nguyenvantaiit.github.io/Workshop-AWS-deployment-With-NodeJS-ReactJS-MongoDBatlas/vi/2-preparation/2.1-create-mongodb-atlas-db/",
	"title": "Tạo Database MongoDB Atlas cho Development",
	"tags": [],
	"description": "",
	"content": "Tạo Database MongoDB Atlas Hướng dẫn từng bước để tạo một database mới trên MongoDB Atlas cho ứng dụng MERN stack của bạn.\n🧭 Các bước thực hiện: Đăng nhập vào MongoDB Atlas. Đăng nhập vào MongoDB Atlas Dashboard Tạo một Project mới (nếu chưa có). Đăng nhập vào MongoDB Atlas Dashboard Đặt tên project: (ví dụ: Xray) Đăng nhập vào MongoDB Atlas Dashboard Nhấp Next và Create project Đăng nhập vào MongoDB Atlas Dashboard Tạo một Cluster mới Nhấp Build a Database trong MongoDB Atlas Chọn Cloud Provider, Cluster Tier/Template và Region ưa thích của bạn Chọn Cloud Provider, Template và Region Sau khi chọn các tùy chọn, nhấp Create Deployment để bắt đầu cung cấp cluster Tạo MongoDB Cluster Deployment Thiết lập Network Access và Tạo Database User Sau khi cluster được triển khai, MongoDB Atlas sẽ hướng dẫn bạn qua quá trình thiết lập kết nối.\nBước 1: Thêm IP address và Tạo user IP address hiện tại của bạn sẽ được tự động thêm vào whitelist.\nMột database user mặc định cũng được đề xuất.\nBước 2: Đặt Username và Password Bạn có thể sử dụng credentials được tạo tự động hoặc tạo riêng.\nNhấp Copy (1) để lưu password, sau đó nhấp Create Database User (2). Thêm IP address và chuẩn bị tạo database user Bước 3: Chọn phương thức kết nối Sau khi user được tạo, nhấp Choose a connection method. Tạo MongoDB database user và copy credentials Bước 4: Chọn \u0026lsquo;Drivers\u0026rsquo; và chọn Node.js Trong màn hình tiếp theo, chọn Drivers, sau đó chọn Node.js làm driver và version. Chọn phương thức kết nối cho MongoDB Atlas 💡 Connection string hiển thị ở đây sẽ chứa username và password của bạn.\nNhấp nút Copy và lưu string — bạn sẽ sử dụng nó trong ứng dụng backend.\nĐây là lần duy nhất password sẽ hiển thị, vì vậy hãy lưu trữ an toàn hoặc ngay lập tức thêm vào AWS Secrets Manager.\nLấy connection string với Node.js driver Sau khi hoàn thành, bạn sẽ nhận được MongoDB connection URI, sẽ được sử dụng bởi backend Node.js (thường được lưu trong Secrets Manager).\n🔐 Quản lý Database Access (Username \u0026amp; Password) Để cập nhật hoặc reset username/password MongoDB sau khi thiết lập ban đầu:\nTrong menu bên trái của MongoDB Atlas Console, nhấp Database Access dưới Security.\nBạn sẽ thấy danh sách các user hiện có.\nNhấp nút Edit bên cạnh user bạn muốn chỉnh sửa.\nChỉnh sửa MongoDB database user Trong modal:\nĐể thay đổi password, nhập password mới Để thay đổi roles, chọn các mức truy cập khác nhau (ví dụ: readWrite, atlasAdmin) Để xóa user, nhấp Delete Nhấp Update User để lưu thay đổi.\nĐừng quên cập nhật connection string hoặc secret trong AWS Secrets Manager nếu password đã thay đổi.\n🌐 Quản lý Network Access (IP Whitelist) Để thay đổi IP nào có thể truy cập MongoDB cluster:\nTrong menu bên trái, nhấp Network Access dưới Security.\nBạn sẽ thấy IP Access List.\nQuản lý IP Whitelist MongoDB Atlas Để thêm IP mới:\nNhấp Add IP Address Bạn có thể chọn: Current IP (tự động phát hiện) Một IP cụ thể (ví dụ: 203.0.113.4) Hoặc Allow Access from Anywhere (0.0.0.0/0) để cho phép tất cả (không khuyến nghị cho production) Để xóa hoặc chỉnh sửa IP hiện có, nhấp options (ba chấm ...) bên cạnh entry.\nThay đổi IP có hiệu lực trong vài giây, không cần restart cluster.\nBây giờ bạn đã biết cách quản lý truy cập và bảo mật cho môi trường MongoDB Atlas.\n"
},
{
	"uri": "https://nguyenvantaiit.github.io/Workshop-AWS-deployment-With-NodeJS-ReactJS-MongoDBatlas/vi/2-preparation/2.2-iam-and-secrets/2.2.1-create-iam-user/",
	"title": "Tạo IAM User cho Development",
	"tags": [],
	"description": "",
	"content": "Trong bước này, bạn sẽ tạo một IAM user với quyền truy cập programmatic, sẽ được sử dụng cho phát triển và testing local bằng AWS CLI hoặc SDKs.\n🧩 IAM Policies cần gắn Bạn sẽ gán các policies sau cho user:\nAmazonS3FullAccess SecretsManagerReadWrite AWSXRayFullAccess Các quyền này sẽ cho phép bạn:\nTải lên hình ảnh sản phẩm lên S3 Truy cập secrets được lưu trong AWS Secrets Manager Gửi dữ liệu trace đến AWS X-Ray từ ứng dụng backend 📝 Các bước thực hiện 1. Truy cập IAM Console Trang chủ IAM Console 2. Trong sidebar bên trái, nhấp Users → sau đó nhấp Add users Thêm IAM User mới 3. Cấu hình User Details User name: ecommerce-user Provide user access to the AWS Management Console - optional (tick vào ô này) Nhấp I want to create an IAM user Trong phần Console access, bạn có thể chọn Autogenerated password hoặc chọn Custom password nếu muốn đặt password riêng. Cấu hình thông tin user Nhấp Next 4. Thiết lập Permissions Chọn Attach policies directly Tìm kiếm và chọn: AmazonS3FullAccess SecretsManagerReadWrite AWSXRayFullAccess Nhấp Next Thiết lập quyền cho IAM user 5. Review và Create Xem lại thông tin user và permissions đã gắn Nhấp Create user Xem lại và tạo IAM user 7. Xác minh user Sau khi user được tạo:\nNhấp Download .csv file\nFile này chứa Username và Password của bạn IAM User được tạo thành công Bạn sẽ không thể xem lại secret access key, vì vậy hãy lưu file một cách an toàn.\nNhấp View user để quay lại trang chi tiết user Bạn sẽ thấy user mới được liệt kê trong IAM Console 8. Tạo Access Key Trên trang chi tiết user, chuyển đến tab Security credentials\nCuộn xuống phần Access keys\nNhấp Create access key\nTrong prompt use case, chọn:\nCommand Line Interface (CLI) Tạo access key cho IAM user Tạo access key cho IAM user Nhấp Next → sau đó Create access key\nCopy Access key ID và Secret access key, hoặc tải xuống dưới dạng .csv\nĐây là lần duy nhất bạn sẽ thấy secret access key.\nHãy đảm bảo tải xuống hoặc copy và lưu trữ an toàn.\n"
},
{
	"uri": "https://nguyenvantaiit.github.io/Workshop-AWS-deployment-With-NodeJS-ReactJS-MongoDBatlas/vi/2-preparation/2.5-s3-setup/2.5.1-create-bucket/",
	"title": "Tạo S3 Bucket cho Product Images",
	"tags": [],
	"description": "",
	"content": "Trong bước này, bạn sẽ tạo một Amazon S3 bucket mới để lưu trữ và phục vụ hình ảnh sản phẩm cho ứng dụng thương mại điện tử.\nBackend đã được cấu hình sẵn để upload vào bucket có tên: ecommerce-products-2025\nHãy đảm bảo bạn tạo bucket với tên chính xác này (hoặc cập nhật code backend tương ứng).\n🪣 Từng bước: Tạo S3 Bucket mới Truy cập Amazon S3 Console\nNhấp Create bucket Amazon Simple Storage Service (Amazon S3) Điền thông tin sau:\nBucket name: ecommerce-products-2025\nRegion:\nChọn cùng AWS Region nơi Beanstalk environment của bạn đang chạy (ví dụ: ap-southeast-1)\nAmazon Simple Storage Service (Amazon S3) 🔐 Bước 2: Tắt Block Public Access Cuộn xuống Block Public Access settings\nBỏ tick: Block all public access\nXác nhận cảnh báo xuất hiện, sau đó nhấp Create bucket\nAmazon Simple Storage Service (Amazon S3) Amazon Simple Storage Service (Amazon S3) 📛 Bước 3: Thêm Bucket Policy (Tùy chọn cho Public Read) Nếu bạn muốn hình ảnh sản phẩm có thể xem công khai (không cần signed URLs), thêm Bucket Policy sau:\nChuyển đến bucket vừa tạo Chọn tab Permissions Nhấp Edit dưới Bucket Policy, và paste nội dung sau: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;AllowUserS3Access\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: { \u0026#34;AWS\u0026#34;: \u0026#34;arn:aws:iam::\u0026lt;your-account-id\u0026gt;:user/\u0026lt;your-username\u0026gt;\u0026#34; }, \u0026#34;Action\u0026#34;: [ \u0026#34;s3:PutObject\u0026#34;, \u0026#34;s3:GetObject\u0026#34;, \u0026#34;s3:DeleteObject\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::ecommerce-products-2025/*\u0026#34; }, { \u0026#34;Sid\u0026#34;: \u0026#34;PublicReadAccess\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;s3:GetObject\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::ecommerce-products-2025/*\u0026#34; } ] } 🔍 Giải thích Permissions\nSID Mục đích AllowUserS3Access Cho phép IAM user cụ thể upload, đọc và xóa objects trong bucket. PublicReadAccess Cho phép công chúng (bất kỳ ai) đọc (GET) files trong bucket, như hình ảnh. 👉 Tiếp tục: 2.5.2 – Test Image Upload to S3\n"
},
{
	"uri": "https://nguyenvantaiit.github.io/Workshop-AWS-deployment-With-NodeJS-ReactJS-MongoDBatlas/vi/2-preparation/2.3-create-beanstalk/2.3.1-create-eb-env/",
	"title": "Tạo và Cấu hình Elastic Beanstalk Environment",
	"tags": [],
	"description": "",
	"content": "Trong bước này, bạn sẽ tạo và cấu hình một Elastic Beanstalk environment để host Node.js backend.\nBạn sẽ:\nTải lên source code backend dưới dạng zip Thiết lập environment variables Gắn IAM instance role Bật AWS X-Ray daemon cho tracing Triển khai và xác minh ứng dụng backend 📦 Bước 1: Chuẩn bị Source Code Backend Tải xuống source code backend (đã được cấu hình cho Beanstalk + X-Ray):\n⬇️ Tải xuống Workshop backend Source Code(backend.zip)\nSau khi tải xuống, giải nén và nén lại nội dung của thư mục backend/ (không phải thư mục chính):\ncd backend zip -r ../ecommerce-backend.zip . 🔐 Bước 2: Chuẩn bị Environment Variables Sử dụng template .env này cho development local hoặc áp dụng như environment variables trong Beanstalk:\nPORT=8080 ALLOWED_ORIGINS=http://your-backend-url.elasticbeanstalk.com,http://localhost:5173 JWT_SECRET=your-jwt-secret-key REFRESH_TOKEN_SECRET=your-refresh-token-secret-key SECRET_NAME=your-secret-name AWS_REGION=ap-southeast-1 NODE_ENV=development ENABLE_XRAY=true XRAY_DAEMON_ADDRESS=127.0.0.1:2000 MONGODB_URI=mongodb+srv://your-username:your-password@cluster0.mongodb.net/?retryWrites=true\u0026amp;w=majority\u0026amp;appName=Cluster0 AWS_ACCESS_KEY=your-aws-access-key AWS_SECRET_KEY=your-aws-secret-key ⚠️ Lưu trữ các key nhạy cảm (ví dụ: AWS \u0026amp; MongoDB credentials) an toàn trong AWS Secrets Manager.\n☁️ Bước 3: Tạo Elastic Beanstalk Environment Truy cập Elastic Beanstalk Console\nElastic Beanstalk Console Nhấp Create Application Điền thông tin: Application name: ecommerce-app Dưới Platform: Platform: Node.js Platform Branch: Node.js 20 running on 64bit Amazon Linux 2023 Dưới Application code: Chọn Upload your code Upload: ecommerce-backend.zip Chọn Platform và Upload Application Environment Type và Upload ZIP ⚙️ Bước 4: Cấu hình Service Access Gắn IAM Role vào EC2 instance IAM role này cho phép EC2 instance truy cập Secrets Manager, S3 và X-Ray\n⚙️ Bước 5: Bật Monitoring và X-Ray Dưới Monitoring bật AWS X-Ray tracing\nBật X-Ray daemon trong environment settings Nhấp Apply.\nSau đó, xem lại tất cả settings, rồi nhấp Create environment\n⚙️ Bước 6: Thiết lập Environment Variables Sau khi environment đã chạy:\nChuyển đến tab Configuration Nhấp Edit Chỉnh sửa software settings để thêm environment variables Copy các variables sau:\nPORT=8080 NODE_ENV=production AWS_XRAY_DAEMON_ADDRESS=127.0.0.1:2000 JWT_SECRET=your-jwt-secret-key REFRESH_TOKEN_SECRET=your-refresh-token-secret-key ALLOWED_ORIGINS=http://localhost:5173,https://your-frontend Nhấp Add environment property. Thiết lập environment variables Nhấp Apply để lưu thay đổi.\n💡 Bạn cũng có thể thêm variables như SECRET_NAME, AWS_ACCESS_KEY, và AWS_SECRET_KEY nếu ứng dụng chưa fetch từ Secrets Manager.\n✅ Bước 7: Xác minh Deployment Sau khi triển khai, truy cập URL environment (ví dụ):\nhttp://ecommerce-env.eba-xxxx.ap-southeast-1.elasticbeanstalk.com Test các endpoints sau:\nGET /api/status GET /health GET /api/products 🧪 Xác minh: ✅ API trả về 200 OK ✅ /health trả về: database: connected xray: enabled ✅ Traces xuất hiện trong AWS X-Ray \u0026gt; Service Map 🧩 Troubleshooting\n❌ App crash hoặc màn hình trắng? → Kiểm tra Logs → Last 100 lines trong EB console ❌ MongoDB không kết nối? → Kiểm tra secret mongodb/connection có tồn tại và IAM role có permission ❌ Không có traces? → Đảm bảo .ebextensions/01_xray.config tồn tại và IAM role có AWSXRayFullAccess 🎉 Chúc mừng! Bạn đã thành công triển khai backend production-ready với AWS Elastic Beanstalk, kết nối MongoDB Atlas, tích hợp AWS X-Ray và sẵn sàng để mở rộng.\n"
},
{
	"uri": "https://nguyenvantaiit.github.io/Workshop-AWS-deployment-With-NodeJS-ReactJS-MongoDBatlas/vi/",
	"title": "Tracing và Debugging Node.js Applications với AWS X-Ray, CloudWatch, và MongoDB Atlas",
	"tags": [],
	"description": "",
	"content": "Tracing và Debugging Node.js Applications với AWS X-Ray, CloudWatch, và MongoDB Atlas Tổng quan Trong workshop thực hành này, bạn sẽ học cách xây dựng, triển khai, trace và monitor một ứng dụng web thương mại điện tử Node.js + React sử dụng các dịch vụ AWS. Chúng ta sẽ đi qua các kỹ thuật tracing nâng cao sử dụng AWS X-Ray và CloudWatch, quản lý credentials an toàn với Secrets Manager, và lưu trữ dữ liệu trên MongoDB Atlas. Bạn cũng sẽ tích hợp image uploads qua Amazon S3 và triển khai toàn bộ stack sử dụng Elastic Beanstalk.\nNội dung Giới thiệu và Tổng quan Kiến trúc Chuẩn bị Instrument Node.js Backend với AWS X-Ray SDK Triển khai: Backend \u0026amp; Frontend Bật S3 Upload và Image Hosting Trace Requests từ Frontend đến Database Đánh giá Workshop và Vấn đề thường gặp Dọn dẹp Tài nguyên AWS "
},
{
	"uri": "https://nguyenvantaiit.github.io/Workshop-AWS-deployment-With-NodeJS-ReactJS-MongoDBatlas/vi/4-deployment/4.1-deploy-backend/",
	"title": "Triển khai Backend lên AWS Elastic Beanstalk",
	"tags": [],
	"description": "",
	"content": "Trong bước này, Node.js backend của bạn giờ đây nên được triển khai lên AWS Elastic Beanstalk với:\nAWS X-Ray tracing được bật MongoDB Atlas kết nối an toàn qua Secrets Manager Environment variables được cấu hình đúng Health check và graceful shutdown được implement ✅ Nếu bạn đã hoàn thành setup trong Section 2.3.1 – Tạo và Cấu hình Elastic Beanstalk Environment, bạn đã sẵn sàng!\n🧪 Xác minh Deployment Truy cập Elastic Beanstalk environment của bạn (ví dụ):\nhttp://ecommerce-env.eba-xxxx.ap-southeast-1.elasticbeanstalk.com Sau đó test các endpoints này:\nGET /api/status GET /health GET /api/products Bạn nên mong đợi:\n✅ HTTP 200 responses ✅ /health trả về xray: enabled và database: connected ✅ Traces xuất hiện trong AWS X-Ray → Service Map ❗ Chưa triển khai? Quay lại: 👉 2.3.1 – Tạo và Cấu hình Elastic Beanstalk Environment\nỞ đó bạn sẽ học cách:\nUpload backend code đã nén Cấu hình environment variables Gắn IAM roles Bật X-Ray daemon 🎉 Sau khi hoàn thành, bạn có một Node.js backend đầy đủ tính năng chạy trên Elastic Beanstalk với tracing, observability và production readiness.\n"
},
{
	"uri": "https://nguyenvantaiit.github.io/Workshop-AWS-deployment-With-NodeJS-ReactJS-MongoDBatlas/vi/2-preparation/2.3-create-beanstalk/2.3.2-configure-eb-env/",
	"title": "Cập nhật Cấu hình Elastic Beanstalk Environment",
	"tags": [],
	"description": "",
	"content": "Trong bước này, bạn sẽ xem lại và cập nhật các cài đặt cấu hình cho Elastic Beanstalk environment đã tạo trước đó.\nBao gồm:\nThiết lập environment variables Đảm bảo IAM role được gắn Bật AWS X-Ray daemon Xác minh quyền truy cập security group và sức khỏe instance 🔧 Bước 1: Mở Environment Settings\nTruy cập Elastic Beanstalk Console Chọn environment của bạn (ví dụ: ecommerce-env) Nhấp Configuration 🧪 Bước 2: Chỉnh sửa Software Settings\nNhấp Edit trong phần Software:\nThêm hoặc cập nhật các environment variables này:\nKey Value PORT 8080 NODE_ENV production AWS_XRAY_DAEMON_ADDRESS 127.0.0.1:2000 JWT_SECRET (JWT secret tùy chỉnh của bạn) REFRESH_TOKEN_SECRET (refresh token secret của bạn) ALLOWED_ORIGINS http://localhost:5173,https://your-frontend.com ✅ Đảm bảo PORT khớp với port mà Node.js server của bạn lắng nghe (mặc định là 8080).\n🔐 Bước 3: Gắn IAM Instance Profile\nNhấp Edit trong phần Security:\nĐặt EC2 instance profile thành:\nEcommerceAppInstanceRole\n(Đã tạo trước đó với quyền X-Ray và Secrets Manager) Điều này đảm bảo ứng dụng của bạn có thể:\nĐọc secrets từ AWS Secrets Manager Gửi dữ liệu trace đến AWS X-Ray Truy cập S3 nếu cần ⚙️ Bước 4: Đảm bảo X-Ray Daemon Đang Chạy\nĐảm bảo ecommerce-backend.zip của bạn chứa:\nFile xray.config\nFile này cấu hình EC2 instance để cài đặt và khởi động AWS X-Ray daemon trên port 2000.\nMẫu .ebextensions/xray.config:\nfiles: \u0026#34;/etc/xray-daemon.cfg\u0026#34;: mode: \u0026#34;000644\u0026#34; owner: root group: root content: | { \u0026#34;Daemon\u0026#34;: { \u0026#34;BindAddress\u0026#34;: \u0026#34;127.0.0.1:2000\u0026#34;, \u0026#34;Region\u0026#34;: \u0026#34;ap-southeast-1\u0026#34; } } services: sysvinit: xray: enabled: true ensureRunning: true files: - /etc/xray-daemon.cfg ✅ Bước 5: Triển khai lại (nếu cần) Nếu bạn đã thay đổi environment settings hoặc package zip:\nChuyển đến Elastic Beanstalk \u0026gt; Application versions Upload và triển khai file .zip đã cập nhật Chờ trạng thái sức khỏe xanh 🔍 Xác nhận mọi thứ đang hoạt động:\nTruy cập endpoint /health → nên hiển thị xray: enabled Chuyển đến AWS X-Ray Console \u0026gt; Service Map → nên hiển thị backend service của bạn Kiểm tra Logs \u0026gt; Request logs trong Beanstalk nếu có vấn đề "
},
{
	"uri": "https://nguyenvantaiit.github.io/Workshop-AWS-deployment-With-NodeJS-ReactJS-MongoDBatlas/vi/2-preparation/",
	"title": "Chuẩn bị",
	"tags": [],
	"description": "",
	"content": "Trong phần này, bạn sẽ hoàn thành tất cả các bước chuẩn bị cần thiết trước khi triển khai và theo dõi ứng dụng trên AWS. Các bài lab này sẽ giúp bạn:\nQuản lý danh tính và truy cập (IAM) trên AWS Thiết lập tài khoản AWS và bật X-Ray Tạo IAM users và roles với quyền phù hợp Quản lý credentials an toàn bằng AWS Secrets Manager Tích hợp MongoDB Atlas với backend bằng Mongoose Mỗi lab là nền tảng quan trọng cho một deployment an toàn, có thể quan sát và sẵn sàng cho production.\nCác lab bao gồm:\n2.1 Tạo MongoDB Atlas Database 2.2 IAM và Quản lý Secrets 2.3 Tạo Elastic Beanstalk Environment 2.4 Tích hợp MongoDB Atlas 2.5 Thiết lập S3 Hoàn thành các bước này trước khi chuyển sang instrumentation backend và deployment.\n"
},
{
	"uri": "https://nguyenvantaiit.github.io/Workshop-AWS-deployment-With-NodeJS-ReactJS-MongoDBatlas/vi/2-preparation/2.2-iam-and-secrets/",
	"title": "Chuẩn bị IAM và Secrets",
	"tags": [],
	"description": "",
	"content": "Trong bước này, chúng ta sẽ chuẩn bị các tài nguyên AWS cơ bản cần thiết để triển khai và giám sát ứng dụng một cách an toàn bằng Elastic Beanstalk, AWS X-Ray và MongoDB Atlas.\nNội dung Tạo IAM User cho Development Tạo IAM Role cho Beanstalk Tạo Secret trong AWS Secrets Manager "
},
{
	"uri": "https://nguyenvantaiit.github.io/Workshop-AWS-deployment-With-NodeJS-ReactJS-MongoDBatlas/vi/2-preparation/2.2-iam-and-secrets/2.2.2-create-iam-role/",
	"title": "Tạo IAM Role cho Beanstalk",
	"tags": [],
	"description": "",
	"content": "Tạo một IAM role để gắn vào các EC2 instances của Elastic Beanstalk. Điều này cho phép các instances tương tác với AWS X-Ray, S3 và Secrets Manager.\nCác policies cần thiết:\nAWSXRayFullAccess AmazonS3FullAccess SecretsManagerReadWrite AWSElasticBeanstalkWebTier Truy cập IAM Roles Console để xem hoặc tạo roles cho môi trường của bạn.\nNhấp Create role ở đầu trang. Tạo IAM Role mới Dưới Trusted entity type, chọn AWS service EC2\nTạo IAM Role mới Nhấp Next để chuyển đến permissions.\n📌 Gắn Policies Trong bước Permissions, tìm kiếm và chọn các policies sau: AWSElasticBeanstalkMulticontainerDocker AWSElasticBeanstalkWebTier AWSElasticBeanstalkWorkerTier AWSElasticBeanstalkEnhancedHealth AWSElasticBeanstalkManagedUpdatesCustomerRolePolicy SecretsManagerReadWrite AWSXRayDaemonWriteAccess Tạo IAM Role mới Nhấp Next. 📝 Đặt tên và Tạo Role Nhập tên cho role, ví dụ: aws-elasticbeanstalk-ec2-role (Tùy chọn) Thêm mô tả như:\nIAM role cho Elastic Beanstalk EC2 instances với quyền truy cập X-Ray, Secrets Manager và các tính năng Beanstalk. Tạo IAM Role mới Nhấp Create Role Sau khi tạo role, quay lại IAM Roles Console và tìm kiếm tên role bạn vừa tạo\n(ví dụ: EcommerceAppInstanceRole) để xác minh rằng nó xuất hiện trong danh sách. Tạo IAM Role mới 10. Gắn Secrets Manager Policy vào IAM Role\nĐể cho phép các EC2 instances của Elastic Beanstalk truy xuất an toàn MongoDB credentials từ AWS Secrets Manager, bạn cần gắn một custom policy vào IAM role (ví dụ: aws-elasticbeanstalk-ec2-role).\nCác bước:\nTruy cập IAM Roles Console. Nhấp tên role của bạn (ví dụ: aws-elasticbeanstalk-ec2-role). Dưới tab Permissions, nhấp Add permissions → Create inline policy. Chọn tab JSON, và paste nội dung sau: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;secretsmanager:GetSecretValue\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:secretsmanager:ap-southeast-1:\u0026lt;your-account-id\u0026gt;:secret:mongodb/connection-*\u0026#34; } ] } 🔁 Thay thế \u0026lt;your-account-id\u0026gt; bằng AWS account ID thực tế của bạn.\nNhấp Next → Đặt tên policy (ví dụ: SecretsManagerAccessPolicy). Nhấp Create policy. 🔍 Policy này làm gì Cho phép: secretsmanager:GetSecretValue Resource: Chỉ cho secrets có tên mongodb/connection-* trong region ap-southeast-1 Mục đích: Cho phép ứng dụng Node.js (trên Beanstalk) lấy MongoDB connection strings an toàn tại runtime bằng AWS SDK. Bảo mật: Quyền truy cập chỉ giới hạn cho secret cần thiết, tránh phơi bày không cần thiết. ✅ Sau khi gắn, instance Beanstalk của bạn có thể truy cập secrets an toàn — không cần hardcode credentials trong file .env hoặc deploy dữ liệu nhạy cảm.\n✅ Đảm bảo các policies đã gắn trông đúng.\nBạn có thể nhấp tên role để xem lại permissions và trust relationships.\n"
},
{
	"uri": "https://nguyenvantaiit.github.io/Workshop-AWS-deployment-With-NodeJS-ReactJS-MongoDBatlas/vi/2-preparation/2.5-s3-setup/2.5.2-test-upload/",
	"title": "Test Image Upload to S3",
	"tags": [],
	"description": "",
	"content": "Sau khi tạo S3 bucket và cấu hình CORS, đã đến lúc test image uploads thông qua giao diện admin của ứng dụng đã triển khai.\nBackend của bạn đã được cấu hình sẵn để chấp nhận file hình ảnh và lưu trữ chúng trong bucket path đúng bằng route uploadProductImage.\n✅ Những gì bạn sẽ xác minh Frontend có thể upload file hình ảnh bằng admin panel Image URLs được lưu trong S3 dưới prefix products/ URLs có thể truy cập công khai (dựa trên bucket policy) 🧪 Từng bước: Test Upload Truy cập admin dashboard URL: http://your-backend-env.elasticbeanstalk.com Chuyển đến phần Product Management hoặc Add Product Điền các trường bắt buộc như: Product Name Price Category Brand SKU Nhấp nút Upload Image Chọn file hình ảnh (ví dụ: .jpg, .png) Chờ upload hoàn thành (bạn sẽ thấy preview hoặc tên file) Nhấp Save hoặc Create Product 🔍 Kết quả mong đợi Sau khi upload thành công:\n✅ Hình ảnh được upload vào S3 bucket (ví dụ: ecommerce-products-2025) ✅ Product entry sẽ lưu image URL như: https://ecommerce-products-2025.s3.ap-southeast-1.amazonaws.com/products/1699355589999-laptop.jpg ✅ Bạn có thể copy và paste URL vào browser để xem hình ảnh\n✅ Không có lỗi CORS trong browser console\n🧰 Đằng sau hậu trường Image upload của bạn sẽ hit endpoint backend này:\nPOST /api/products/upload Content-Type: multipart/form-data Authorization: Bearer \u0026lt;admin-token\u0026gt; Được xử lý bởi:\nroutes/products.js\ncontrollers/productController.js → uploadProductImage()\nNó sử dụng AWS SDK v3 và X-Ray tracing để log chi tiết hành vi upload.\n🧩 Troubleshooting:\nVấn đề Giải pháp ❌ Hình ảnh không hiển thị Đảm bảo tên bucket \u0026amp; region đúng trong code ❌ Access Denied Xác nhận IAM Role có AmazonS3FullAccess ❌ Image URL 403 Forbidden Đảm bảo bucket policy cho phép s3:GetObject cho path đúng 🎉 Chúc mừng! Bạn đã thành công hoàn thành tích hợp S3 image upload và xác nhận rằng cấu hình frontend + backend + bucket hoạt động end-to-end.\n"
},
{
	"uri": "https://nguyenvantaiit.github.io/Workshop-AWS-deployment-With-NodeJS-ReactJS-MongoDBatlas/vi/4-deployment/4.2-deploy-frontend/",
	"title": "Triển khai React Frontend lên AWS Elastic Beanstalk",
	"tags": [],
	"description": "",
	"content": "Trong phần này, bạn sẽ triển khai React frontend của ứng dụng thương mại điện tử bằng cách kết hợp nó vào cùng deployment với Node.js backend sử dụng Elastic Beanstalk.\nKhác với S3/CloudFront hosting, cách tiếp cận này sử dụng Express backend để serve frontend static files (dist/)—cho phép routing liền mạch, cookies và CORS dưới cùng domain.\n📦 Tải xuống Frontend Source Code ⬇️ Tải xuống Frontend Source (frontend.zip)\nSau khi tải xuống:\nGiải nén archive Trong thư mục đã giải nén (frontend/), chuyển đến src/ Tạo file tên .env.production với nội dung sau: VITE_API_URL=https://your-backend-env.ap-southeast-1.elasticbeanstalk.com/api Thay thế URL bằng backend Beanstalk environment thực tế của bạn.\n⚙️ Build Frontend Mở terminal trong thư mục frontend/\nChạy các lệnh sau:\nnpm install npm run build Điều này sẽ tạo ra thư mục dist chứa static assets production-ready.\n🚀 Di chuyển dist/ vào Backend và Triển khai Copy thư mục dist/ vừa tạo\nPaste vào backend/ directory (bên cạnh server.js)\nCấu trúc backend của bạn giờ nên như sau:\nbackend/ ├── server.js ├── dist/ │ ├── index.html │ └── assets/ ├── routes/ ├── .ebextensions/ └── ... Nén lại thư mục backend:\ncd backend zip -r ../ecommerce-backend-with-frontend.zip . Truy cập Elastic Beanstalk Console\nChọn environment ecommerce-app hiện có Elastic Beanstalk: Upload gói triển khai frontend Nhấp Upload and deploy Elastic Beanstalk: Chọn và triển khai phiên bản mới Chọn file zip mới: ecommerce-backend-with-frontend.zip và label version-2 Elastic Beanstalk: Đặt nhãn phiên bản và deploy Nhấp Deploy 🌐 Truy cập Ứng dụng Truy cập URL Beanstalk environment:\nhttp://ecommerce-env.eba-xxxx.ap-southeast-1.elasticbeanstalk.com Bạn sẽ thấy React frontend được triển khai — tích hợp hoàn toàn với backend.\nFrontend đã được triển khai và truy cập qua Beanstalk URL Code sau trong server.js đảm bảo static frontend routing hoạt động\napp.use(express.static(path.join(__dirname, \u0026#39;dist\u0026#39;))); app.get(\u0026#39;*\u0026#39;, (req, res) =\u0026gt; { res.sendFile(path.join(__dirname, \u0026#39;dist\u0026#39;, \u0026#39;index.html\u0026#39;)); }); 🎉 Ứng dụng thương mại điện tử full-stack của bạn giờ đã được triển khai lên AWS Elastic Beanstalk — hoàn chỉnh với frontend, backend, API và X-Ray observability.\n"
},
{
	"uri": "https://nguyenvantaiit.github.io/Workshop-AWS-deployment-With-NodeJS-ReactJS-MongoDBatlas/vi/3-xray-sdk/",
	"title": "Instrument Node.js Backend với AWS X-Ray SDK",
	"tags": [],
	"description": "",
	"content": "Trong phần này, bạn sẽ khám phá cách AWS X-Ray SDK được tích hợp đầy đủ vào Node.js backend để cung cấp tracing cho:\nIncoming HTTP requests MongoDB queries Internal business logic Errors and health diagnostics Tất cả code cần thiết đã được implement trong server.js. Bước này là về hiểu, xác minh và test setup tracing.\n📥 Tải X-Ray Daemon tại đây\n📂 Vị trí source code File: backend/server.js Module: aws-xray-sdk 🧠 Các tính năng chính của Integration ✅ 1. Auto-tracing của HTTP requests const AWSXRay = require(\u0026#39;aws-xray-sdk\u0026#39;); AWSXRay.captureHTTPsGlobal(require(\u0026#39;http\u0026#39;), true); AWSXRay.setDaemonAddress(\u0026#39;127.0.0.1:2000\u0026#39;); app.use(AWSXRay.express.openSegment(\u0026#39;EcommerceApp\u0026#39;)); Tự động trace tất cả incoming Express routes. Capture upstream headers (từ frontend hoặc ALB). Gửi segments đến local X-Ray daemon tại 127.0.0.1:2000 nếu chạy local.\n✅ 2. MongoDB Tracing qua Custom Subsegments const segment = AWSXRay.getSegment(); const subsegment = segment.addNewSubsegment(\u0026#39;MongoDB - Connect\u0026#39;); // ... await mongoose.connect(uri, options); subsegment.close(); Pattern này cho phép bạn trace database-specific logic. Nó được sử dụng trong function connectMongoDB().\n✅ 3. CORS Headers \u0026amp; Trace Propagation allowedHeaders: [\u0026#39;Content-Type\u0026#39;, \u0026#39;Authorization\u0026#39;, \u0026#39;X-Amzn-Trace-Id\u0026#39;, \u0026#39;x-amz-security-token\u0026#39;], exposedHeaders: [\u0026#39;Set-Cookie\u0026#39;, \u0026#39;X-Amzn-Trace-Id\u0026#39;] Setup này đảm bảo full trace propagation qua frontend → backend → AWS services.\n✅ 4. Structured Logging với Trace ID const traceId = req.headers[\u0026#39;x-amzn-trace-id\u0026#39;] || \u0026#39;local\u0026#39;; console.log(`[${traceId}] ${req.method} ${req.originalUrl}`, { headers, body }); Cho phép correlate logs với traces trong X-Ray console.\n✅ 5. X-Ray Segment Closure app.use(AWSXRay.express.closeSegment()); Điều này cần thiết để finalize mỗi trace, và nên được sử dụng sau khi tất cả routes được register.\n🩺 Health Check + X-Ray Visibility Endpoint /health cũng kiểm tra:\nMongoDB connectivity qua ping() X-Ray daemon address availability Sample output:\n{ \u0026#34;status\u0026#34;: \u0026#34;healthy\u0026#34;, \u0026#34;services\u0026#34;: { \u0026#34;database\u0026#34;: \u0026#34;connected\u0026#34;, \u0026#34;xray\u0026#34;: \u0026#34;enabled\u0026#34; } // ... } 🧪 Xác minh trong AWS Console Mở X-Ray Console → Service Map\nTìm EcommerceApp\nInspect traces cho:\nLatency MongoDB errors End-to-end flows từ frontend ✅ Tóm tắt Backend của bạn được instrument với X-Ray. Traces capture chi tiết API + DB behavior. Logs được correlate với trace IDs. An toàn và production-ready. 🎯 Chi tiết Tracing với Annotation và Metadata Trong backend project này, mỗi API operation chính được wrap bằng helper function thêm X-Ray subsegments, với detailed annotations và metadata để enhance observability.\n📍 Vị trí trong Source Code File: controllers/productController.js Wrapper Function: withXRay(segmentName, fn) 🧩 Annotation và Metadata là gì? Annotations là indexed key–value pairs — được sử dụng để filter trong X-Ray console. Metadata là key–value data (bất kỳ JSON type nào) — được sử dụng cho detailed trace context. ✅ Ví dụ trong Code getProducts API Khi users xem product list, system capture:\nsegment.addAnnotation(\u0026#39;category\u0026#39;, category || \u0026#39;all\u0026#39;); segment.addAnnotation(\u0026#39;page\u0026#39;, parseInt(page)); segment.addMetadata(\u0026#39;query_params\u0026#39;, { category, brand, sort, page, limit }); segment.addMetadata(\u0026#39;category_counts\u0026#39;, categoryCounts); → Điều này giúp bạn trace:\nFilters nào được sử dụng Bao nhiêu products được tìm thấy Categories nào có mặt uploadProductImage API Khi admins upload product image lên S3:\ns3Segment.addAnnotation(\u0026#39;upload_success\u0026#39;, true); s3Segment.addAnnotation(\u0026#39;image_url\u0026#39;, imageUrl); s3Segment.addMetadata(\u0026#39;upload_result\u0026#39;, { imageUrl, key: params.Key, bucket: params.Bucket }); → Bạn có thể inspect uploaded image details hoặc trace failures (ví dụ: S3 permission issues).\ncreateProduct API Trong quá trình tạo product mới:\ndbSegment.addAnnotation(\u0026#39;product_created\u0026#39;, true); dbSegment.addMetadata(\u0026#39;product_info\u0026#39;, { id: product._id, name, sku, image, price, category }); → Cho phép bạn trace product nào được thêm và liệu việc tạo có thành công hay thất bại.\n⚠️ Error Tracing Trong trường hợp thất bại, những điều sau được thêm:\nsegment.addAnnotation(\u0026#39;status\u0026#39;, \u0026#39;error\u0026#39;); segment.addAnnotation(\u0026#39;error_type\u0026#39;, err.name); segment.addMetadata(\u0026#39;error_stack\u0026#39;, err.stack); segment.addMetadata(\u0026#39;error_context\u0026#39;, { operation: segmentName, timestamp: new Date().toISOString(), args_count: args.length }); → Điều này cho phép filter cho failed requests và xem complete error context trong AWS X-Ray \u0026gt; Trace Details.\n🔍 Cách xem trong X-Ray Console Truy cập CloudWatch Home → Application Signals (APM) →Traces Giao diện CloudWatch Traces Filter traces sử dụng annotations, ví dụ:\nannotation.status = \u0026#34;success\u0026#34; Lọc traces theo annotation trong CloudWatch Chi tiết trace trong CloudWatch Click vào trace → View subsegments → Check tab Metadata hoặc Annotations Annotations và Metadata trong trace CloudWatch 💡 Lưu ý: Structured tracing này làm cho debugging, auditing, và performance monitoring dễ dàng hơn đáng kể trong production environments.\n"
},
{
	"uri": "https://nguyenvantaiit.github.io/Workshop-AWS-deployment-With-NodeJS-ReactJS-MongoDBatlas/vi/2-preparation/2.3-create-beanstalk/",
	"title": "Tạo Elastic Beanstalk Environment",
	"tags": [],
	"description": "",
	"content": "🚀 AWS Elastic Beanstalk là gì? ElasticBeanstalk Elastic Beanstalk là một dịch vụ Platform-as-a-Service (PaaS) từ AWS giúp dễ dàng triển khai, quản lý và mở rộng ứng dụng. Nó hỗ trợ nhiều ngôn ngữ và nền tảng bao gồm Node.js, Java, Python và .NET.\nVới Elastic Beanstalk, bạn tập trung vào code, và AWS xử lý infrastructure—như cung cấp EC2 instances, load balancers, auto scaling, monitoring và deployments.\n✅ Lợi ích chính Không cần quản lý infrastructure — không cần thủ công cung cấp EC2, security groups, hoặc scaling groups Monitoring tích hợp qua CloudWatch và health dashboards Triển khai dễ dàng qua file zip hoặc Git Tích hợp với IAM, X-Ray, S3 và các dịch vụ AWS khác Hỗ trợ environment variables và secret injection 🎯 Trong bước này, bạn sẽ: Tải lên Node.js backend dưới dạng file zip Tạo Elastic Beanstalk environment Gắn IAM role để cho phép truy cập: AWS X-Ray Secrets Manager S3 Buckets Bật X-Ray daemon bằng .ebextensions Thiết lập environment variables như JWT_SECRET, ALLOWED_ORIGINS, và PORT Sau khi hoàn thành, ứng dụng backend của bạn sẽ được triển khai đầy đủ trong môi trường AWS production-grade, tự động mở rộng và có thể quan sát được.\n➡️ Tiếp tục đến 2.3.1 – Triển khai Backend Application để bắt đầu thiết lập.\n"
},
{
	"uri": "https://nguyenvantaiit.github.io/Workshop-AWS-deployment-With-NodeJS-ReactJS-MongoDBatlas/vi/2-preparation/2.2-iam-and-secrets/2.2.3-create-secret/",
	"title": "Tạo và Sử dụng Secret trong AWS Secrets Manager",
	"tags": [],
	"description": "",
	"content": "Trong phần này, bạn sẽ học cách lưu trữ và truy xuất an toàn các credentials nhạy cảm bằng AWS Secrets Manager.\nThay vì hardcode MongoDB connection strings hoặc AWS keys trong file .env hoặc source code, bạn sẽ sử dụng AWS Secrets Manager để lưu trữ secrets và truy cập chúng an toàn từ ứng dụng backend.\n🔐 Từng bước: Tạo secret trong Secrets Manager Truy cập Secrets Manager Console\nNhấp Store a new secret\nLưu secret mới trong AWS Secrets Manager Chọn Other type of secrets\nĐiều này cho phép bạn định nghĩa các key-value pairs tùy chỉnh một cách thủ công. Trong phần Plaintext, nhập nội dung sau (hoặc chỉnh sửa theo nhu cầu): { \u0026#34;MONGODB_URI\u0026#34;: \u0026#34;mongodb+srv://\u0026lt;user\u0026gt;:\u0026lt;pass\u0026gt;@cluster.mongodb.net/ecommerce\u0026#34;, \u0026#34;AWS_ACCESS_KEY\u0026#34;: \u0026#34;\u0026lt;your-access-key\u0026gt;\u0026#34;, \u0026#34;AWS_SECRET_KEY\u0026#34;: \u0026#34;\u0026lt;your-secret-key\u0026gt;\u0026#34; } Lưu secret mới trong AWS Secrets Manager Thay thế \u0026lt;user\u0026gt;, \u0026lt;password\u0026gt;, \u0026lt;your-access-key\u0026gt;, \u0026lt;your-secret-key\u0026gt; bằng credentials thực tế của bạn.\nNhấp Next\nNhập tên cho secret\nVí dụ: mongodb/connection\n✅ Tên này sẽ được sử dụng trong ứng dụng để truy xuất secret.\nBạn có thể tùy chọn thêm mô tả và tags.\nĐể automatic rotation tắt (hiện tại), sau đó nhấp Next\nTrên trang Review, kiểm tra lại các thông tin đã nhập\nSau đó nhấp Store để tạo secret.\nBạn sẽ thấy thông báo xác nhận và secret mới được liệt kê trong dashboard Secrets Manager.\n🧪 Xác nhận Secret Nhấp vào tên secret (mongodb/connection) để mở nó.\nXác minh rằng các key-value pairs đã được lưu đúng.\nXem secret đã lưu trong Secrets Manager 🧑‍💻 Cách sử dụng secret trong Node.js (runtime access) Để lấy secret từ ứng dụng backend:\nCài đặt AWS SDK v3 nếu chưa có: npm install @aws-sdk/client-secrets-manager Sử dụng code sau trong backend (ví dụ: server.js hoặc config module): const { SecretsManagerClient, GetSecretValueCommand } = require(\u0026#39;@aws-sdk/client-secrets-manager\u0026#39;); const client = new SecretsManagerClient({ region: \u0026#39;ap-southeast-1\u0026#39; }); async function getMongoURI() { const command = new GetSecretValueCommand({ SecretId: \u0026#39;mongodb/connection\u0026#39; }); const data = await client.send(command); const secret = JSON.parse(data.SecretString); return secret.MONGODB_URI; } "
},
{
	"uri": "https://nguyenvantaiit.github.io/Workshop-AWS-deployment-With-NodeJS-ReactJS-MongoDBatlas/vi/2-preparation/2.4-mongodb-integration/",
	"title": "Tích hợp MongoDB Atlas và Mongoose",
	"tags": [],
	"description": "",
	"content": "Trong phần này, bạn sẽ xác minh cách ứng dụng backend kết nối an toàn với MongoDB Atlas bằng Mongoose và AWS Secrets Manager.\nBạn không cần viết logic từ đầu. Tích hợp hoàn chỉnh đã được implement trong file server.js có sẵn trong source code workshop.\n📦 Tải xuống Source Code 👉 Tải xuống Workshop Code (.zip)\nGiải nén và mở thư mục backend/. Tất cả logic kết nối database nằm trong server.js.\n🧠 Cách hoạt động AWS Secrets Manager lưu trữ MongoDB connection string dưới key mongodb/connection Tại runtime, ứng dụng lấy giá trị đó bằng AWS SDK: const client = new SecretsManagerClient({ region: \u0026#39;ap-southeast-1\u0026#39; }); const command = new GetSecretValueCommand({ SecretId: \u0026#39;mongodb/connection\u0026#39; }); const data = await client.send(command); const uri = JSON.parse(data.SecretString).MONGODB_URI; Sau đó kết nối MongoDB bằng:\nawait mongoose.connect(uri, { ...connectionOptions }); 🔍 Những gì cần tìm Mở function này trong server.js:\nconst connectMongoDB = async (maxRetries = 5, retryDelay = 3000) =\u0026gt; { ... } Bao gồm:\nLogic auto-retry connection Cài đặt timeout Pool sizing Xử lý lỗi graceful 🧪 Xác minh kết nối Sau khi triển khai backend:\nTruy cập endpoint /health Bạn sẽ thấy: \u0026#34;services\u0026#34;: { \u0026#34;database\u0026#34;: \u0026#34;connected\u0026#34;, \u0026#34;xray\u0026#34;: \u0026#34;enabled\u0026#34; } Nếu MongoDB bị ngắt kết nối hoặc credentials sai, status sẽ hiển thị \u0026quot;database\u0026quot;: \u0026quot;disconnected\u0026quot;.\n🛡️ Nhắc nhở bảo mật MongoDB credentials không được hardcode Secrets được lưu trong AWS Secrets Manager Chỉ Beanstalk EC2 role mới có thể truy cập ✅ Với setup này, backend của bạn được kết nối an toàn và đáng tin cậy với MongoDB Atlas theo cách production-ready.\n"
},
{
	"uri": "https://nguyenvantaiit.github.io/Workshop-AWS-deployment-With-NodeJS-ReactJS-MongoDBatlas/vi/4-deployment/",
	"title": "Triển khai Backend và Frontend",
	"tags": [],
	"description": "",
	"content": "Trong chương này, bạn sẽ triển khai cả backend (Node.js + MongoDB + AWS X-Ray) và frontend (React + Vite) của ứng dụng thương mại điện tử lên AWS infrastructure.\nChúng ta sẽ bao gồm:\n📌 4.1 Triển khai Backend lên Elastic Beanstalk Triển khai Node.js backend lên AWS Elastic Beanstalk Sử dụng code đã được cấu hình sẵn với: AWS X-Ray tracing MongoDB Atlas integration Secrets Manager Auto health checks và logging Xác minh deployment với /health và /api/status Đảm bảo traces hiển thị trong AWS X-Ray Console 👉 Xem: 4.1 Triển khai Backend lên AWS Elastic Beanstalk\n📌 4.2 Triển khai React Frontend lên AWS Build React Vite frontend Triển khai sử dụng: Option A: Amazon S3 + CloudFront (static hosting) Option B: Second Elastic Beanstalk environment (tùy chọn) Cấu hình frontend để giao tiếp với backend an toàn Trigger end-to-end traces từ frontend → backend → database 👉 Xem: 4.2 Triển khai React Frontend lên AWS (S3/CloudFront hoặc Beanstalk)\nSau khi hoàn thành chương này, bạn sẽ có toàn bộ ứng dụng MERN stack được triển khai đầy đủ trên AWS với production-grade observability sử dụng X-Ray, CloudWatch, và Secrets Manager.\n"
},
{
	"uri": "https://nguyenvantaiit.github.io/Workshop-AWS-deployment-With-NodeJS-ReactJS-MongoDBatlas/vi/5-s3-upload/",
	"title": "Bật S3 Upload và Image Hosting",
	"tags": [],
	"description": "",
	"content": "Trong phần này, bạn sẽ xác minh và test image uploading sử dụng Amazon S3, tích hợp trực tiếp vào backend API.\nBackend của bạn đã được cấu hình sẵn với:\nAWS SDK v3 (@aws-sdk/client-s3) Multer để xử lý form-data uploads X-Ray tracing cho upload activity Logic để tạo và trả về public URLs từ S3 bucket ✅ Những gì bạn sẽ làm Xác nhận S3 bucket (ví dụ: ecommerce-products-2025) được tạo đúng Upload product images từ admin dashboard Xác minh image URLs có thể truy cập từ Amazon S3 Xác nhận tracing xuất hiện trong AWS X-Ray 🔍 Cách Upload hoạt động Backend route chịu trách nhiệm cho file uploads là:\nPOST /api/products/upload Nó sử dụng uploadProductImage controller trong controllers/productController.js.\nFunction này làm những việc sau:\nParse file sử dụng multer:\nconst upload = multer(); Chấp nhận multipart file như image field\nGửi nó như buffer đến S3\nKhởi tạo S3 client trong AWS region của bạn, sử dụng environment variables:\nconst s3Client = new S3Client({ region: process.env.AWS_REGION || \u0026#39;ap-southeast-1\u0026#39;, credentials: { accessKeyId: process.env.AWS_ACCESS_KEY, secretAccessKey: process.env.AWS_SECRET_KEY } }); Build file path và upload file:\nconst params = { Bucket: \u0026#39;ecommerce-products-2025\u0026#39;, // Đảm bảo khớp với tên bucket của bạn! Key: `products/${Date.now()}-${req.file.originalname}`, Body: req.file.buffer, ContentType: req.file.mimetype }; await s3Client.send(new PutObjectCommand(params)); Trả về S3 URL như:\nhttps://ecommerce-products-2025.s3.ap-southeast-1.amazonaws.com/products/your-image.jpg 🧪 Test Upload Đăng nhập vào app như Admin Chuyển đến Admin Dashboard → Add Product Chọn image và nhấp Upload Submit form Sau khi lưu, bạn sẽ thấy uploaded image xuất hiện bên cạnh product. Image URL nên bắt đầu với:\nhttps://ecommerce-products-2025.s3.ap-southeast-1.amazonaws.com/... ✅ Bạn có thể nhấp link này và xem công khai.\n⚙️ Những gì cần đúng ✅ Bucket Name trong productController.js: Đảm bảo dòng này:\nBucket: \u0026#39;ecommerce-products-2025\u0026#39; khớp với tên S3 bucket thực tế của bạn (cái bạn tạo thủ công hoặc trong lab step 2.5.1 - Tạo S3 Bucket).\n✅ IAM Role được sử dụng bởi Beanstalk phải có policy này:\nAmazonS3FullAccess Hoặc custom policy cho phép s3:PutObject, s3:GetObject cho bucket của bạn\n✅ CORS Settings trong S3 bucket: Đảm bảo bạn đã cấu hình:\n\u0026lt;CORSRule\u0026gt; \u0026lt;AllowedOrigin\u0026gt;*\u0026lt;/AllowedOrigin\u0026gt; \u0026lt;AllowedMethod\u0026gt;GET\u0026lt;/AllowedMethod\u0026gt; \u0026lt;AllowedMethod\u0026gt;POST\u0026lt;/AllowedMethod\u0026gt; \u0026lt;AllowedMethod\u0026gt;PUT\u0026lt;/AllowedMethod\u0026gt; \u0026lt;AllowedHeader\u0026gt;*\u0026lt;/AllowedHeader\u0026gt; \u0026lt;/CORSRule\u0026gt; 📦 Sample Environment Variables Các environment variables này phải có trong Elastic Beanstalk config hoặc .env:\nAWS_REGION=ap-southeast-1 AWS_ACCESS_KEY=your-access-key AWS_SECRET_KEY=your-secret-key Không có những thứ này, S3Client sẽ không authenticate đúng và uploads sẽ thất bại.\n🔎 X-Ray Tracing Mỗi file upload được trace qua AWS X-Ray:\nFileValidation segment logs:\nfile size mimetype X-Ray: Log kiểm tra file upload S3Upload segment logs: image_url key upload result hoặc error X-Ray: Log upload ảnh lên S3 Truy cập X-Ray Console và navigate đến Service Map để xác nhận upload activity. 🎉 Sau khi xác minh, bạn giờ có complete S3 image hosting integration với traceable uploads, public file access, và admin-managed product creation.\n"
},
{
	"uri": "https://nguyenvantaiit.github.io/Workshop-AWS-deployment-With-NodeJS-ReactJS-MongoDBatlas/vi/2-preparation/2.5-s3-setup/",
	"title": "Thiết lập Amazon S3 cho Image Upload",
	"tags": [],
	"description": "",
	"content": "☁️ Tổng quan Amazon S3 Amazon Simple Storage Service (Amazon S3) Amazon S3 (Simple Storage Service) là dịch vụ lưu trữ object có thể mở rộng, bền vững và có tính khả dụng cao được cung cấp bởi AWS. Nó cho phép developers lưu trữ và truy xuất bất kỳ lượng dữ liệu nào vào bất kỳ lúc nào, từ bất kỳ đâu trên web.\n💡 Các trường hợp sử dụng phổ biến Hosting các file tĩnh như HTML, CSS, JS Lưu trữ hình ảnh, video hoặc tài liệu được upload bởi user Phục vụ nội dung có thể tải xuống Hoạt động như backup hoặc archive storage Hỗ trợ data lakes và machine learning workflows 🛍️ S3 làm gì trong Workshop này Trong workshop thương mại điện tử này, Amazon S3 được sử dụng để:\nLưu trữ hình ảnh sản phẩm được upload Phục vụ hình ảnh qua public URLs Tích hợp an toàn với backend bằng IAM và AWS SDK Log và trace hoạt động upload bằng AWS X-Ray Backend của bạn đã được cấu hình sẵn để upload hình ảnh sản phẩm vào S3 bucket được chỉ định (ví dụ: ecommerce-products-2025) và trả về URLs có thể truy cập để hiển thị trong UI.\n✅ Những gì bạn sẽ làm trong phần này Tạo S3 bucket mới Thiết lập permissions và public access Cấu hình CORS policy để cho phép upload từ frontend Upload hình ảnh từ admin dashboard Xác minh hình ảnh có thể truy cập online Xác nhận hoạt động upload có thể trace trong AWS X-Ray 📁 Source Code liên quan Chức năng này được xử lý trong backend bởi:\n📦 backend/ └── controllers/productController.js └── uploadProductImage() // S3 + X-Ray integration Bạn có thể test qua:\nPOST /api/products/upload 👉 Tiếp tục bước tiếp theo: Tạo S3 Bucket cho Product Images\n"
},
{
	"uri": "https://nguyenvantaiit.github.io/Workshop-AWS-deployment-With-NodeJS-ReactJS-MongoDBatlas/vi/6-end-to-end-tracing/",
	"title": "Trace Requests từ Frontend đến Database",
	"tags": [],
	"description": "",
	"content": "Trong phần này, bạn sẽ thực hiện end-to-end tracing của user actions từ React frontend, qua backend, xuống MongoDB, tất cả hiển thị trong AWS X-Ray.\n🧪 Thử điều này Mở frontend của bạn (hosted trên S3 hoặc Beanstalk)\nĐăng ký tài khoản mới\nĐăng ký tài khoản user mới Đăng nhập sử dụng credentials vừa tạo\nĐăng nhập vào tài khoản Duyệt đến một sản phẩm\nXem chi tiết sản phẩm Nhấp \u0026ldquo;Add to cart\u0026rdquo;, sau đó tiến hành checkout\nThêm sản phẩm vào giỏ hàng và tiến hành checkout Đặt hàng\nĐặt hàng 🔍 Bây giờ kiểm tra AWS X-Ray: Truy cập CloudWatch Console → Trace Map Bạn sẽ thấy: Frontend traced request → Backend service (EcommerceApp) Trace X-Ray: frontend đến backend Trace X-Ray: backend đến MongoDB Backend → MongoDB operation Trace X-Ray: chi tiết segment Nhấp vào bất kỳ trace nào để xem Segment details. ✅ Điều này chứng minh: Frontend gửi trace headers (X-Amzn-Trace-Id) Backend capture và log segments Database activity cũng được ghi lại "
},
{
	"uri": "https://nguyenvantaiit.github.io/Workshop-AWS-deployment-With-NodeJS-ReactJS-MongoDBatlas/vi/7-review/",
	"title": "Đánh giá Workshop và Vấn đề thường gặp, Cải tiến tương lai",
	"tags": [],
	"description": "",
	"content": "✅ Những gì bạn đã hoàn thành Bằng cách hoàn thành workshop này, bạn đã thành công:\n🚀 Triển khai ứng dụng full-stack Node.js + React lên AWS 📦 Sử dụng Elastic Beanstalk cho deployment và quản lý 🧩 Tích hợp AWS X-Ray cho end-to-end distributed tracing 🔐 Bảo mật credentials sử dụng AWS Secrets Manager ☁️ Kết nối MongoDB Atlas như managed NoSQL database 📊 Sử dụng CloudWatch cho monitoring cơ bản và health checks 🖼️ Bật image uploads lên Amazon S3 ⚠️ Vấn đề thường gặp và Troubleshooting ❌ Traces không hiển thị trong X-Ray?\nĐảm bảo .ebextensions/xray.config được deploy Kiểm tra IAM Role có AWSXRayFullAccess Xác minh AWS_XRAY_DAEMON_ADDRESS được set thành 127.0.0.1:2000 ❌ MongoDB connection thất bại?\nĐảm bảo secret name tồn tại trong Secrets Manager Đảm bảo IP hiện tại hoặc EC2 security group được whitelist trong MongoDB Atlas ❌ CORS hoặc cookies không hoạt động?\nKiểm tra lại environment variable ALLOWED_ORIGINS Đảm bảo frontend và backend được serve từ domains đúng ❌ S3 upload issues?\nXác nhận CORS settings và IAM permissions đúng cho S3 bucket Kiểm tra uploaded files có thể truy cập công khai (qua S3 Bucket Policy) 🚧 Cải tiến tương lai Mặc dù phiên bản workshop này cung cấp complete deployment pipeline, đây là một số tính năng đã lên kế hoạch để cải tiến thêm:\n📜 Bật AWS CloudTrail\nCapture API activity logs cho auditing và visibility qua các services.\n📈 Tích hợp Auto Scaling Groups\nTự động scale EC2 instances dựa trên traffic hoặc CPU usage sử dụng Elastic Beanstalk\u0026rsquo;s scaling options.\n🔒 Advanced secrets rotation\nBật automatic rotation của secrets cho MongoDB hoặc AWS credentials.\n📉 Sử dụng Amazon CloudWatch Alarms\nAlert khi memory cao, CPU, hoặc errors per minute theo thời gian thực.\n🧪 Tích hợp CI/CD với CodePipeline + CodeBuild\nTự động hóa build và deployment pipeline cho mỗi code push lên GitHub.\n🛰️ Bật VPC private subnets\nCải thiện bảo mật bằng cách chạy databases và internal services trong private subnets.\n🌐 Sử dụng Route 53 với HTTPS + Custom Domain\nMap Beanstalk environments hoặc CloudFront distributions đến domain riêng với SSL certificates.\n🎉 Chúc mừng!\nBạn đã triển khai một ứng dụng full-stack production-ready với AWS observability, secret management, và database connectivity.\n"
},
{
	"uri": "https://nguyenvantaiit.github.io/Workshop-AWS-deployment-With-NodeJS-ReactJS-MongoDBatlas/vi/8-cleanup/",
	"title": "Dọn dẹp Tài nguyên AWS",
	"tags": [],
	"description": "",
	"content": "Để tránh phí AWS liên tục, điều quan trọng là phải xóa các tài nguyên bạn đã tạo trong quá trình workshop. Bước này đặc biệt quan trọng nếu bạn đang sử dụng AWS Free Tier, vì một số dịch vụ (như MongoDB Atlas, EC2, hoặc CloudWatch Logs) có thể phát sinh phí theo thời gian.\n🧹 Tài nguyên cần xóa Đây là cách dọn dẹp từng dịch vụ:\n1️⃣ Elastic Beanstalk Đi đến Elastic Beanstalk Console\nChọn environment của bạn (ví dụ: ecommerce-app)\nNhấp Actions → Terminate environment\n⚠️ Điều này sẽ chấm dứt EC2, Load Balancer, Auto Scaling, và tài nguyên S3 được tạo bởi Beanstalk. Xác nhận xóa environment Xác nhận xóa\nXác nhận xóa environment 2️⃣ Amazon S3 Buckets Đi đến S3 Console Chọn bucket của bạn (ví dụ: ecommerce-products-2025) Chọn bucket để xóa Làm trống nội dung bucket trước: Nhấp Empty Làm trống bucket Xác nhận xóa Sau đó nhấp Delete bucket Xóa bucket Xác nhận xóa bucket ⚠️ Buckets phải được làm trống trước khi xóa.\n3️⃣ MongoDB Atlas Cluster Nếu bạn đã tạo MongoDB Atlas cluster, việc xóa nó sẽ dừng tính phí từ MongoDB (không phải AWS).\nĐi đến MongoDB Atlas\nĐiều hướng đến project của bạn\nRời khỏi project\nRời khỏi project MongoDB Atlas Xác nhận rời khỏi project Nhấp Cluster → Terminate Terminate cluster MongoDB Atlas Xác nhận terminate cluster Xóa project nếu không sử dụng lại Xóa project MongoDB Atlas 4️⃣ AWS Secrets Manager Đi đến Secrets Manager Chọn secret của bạn (ví dụ: mongodb/connection, ecommerce-secrets) Nhấp Actions → Delete Xác nhận xóa Xóa secret trong AWS Secrets Manager Secrets được lên lịch xóa trong 7 ngày (bạn có thể buộc xóa ngay lập tức qua CLI).\n5️⃣ IAM Users và Roles Đi đến IAM Console Xóa: IAM user (ví dụ: ecommerce-user) IAM roles (ví dụ: EcommerceAppInstanceRole) IAM policies được tạo cho workshop (nếu tùy chỉnh) ✅ Điều này đảm bảo credentials workshop của bạn không bị lộ hoặc tái sử dụng một cách vô tình.\n6️⃣ CloudWatch Logs (Tùy chọn) Đi đến CloudWatch Logs Điều hướng đến Logs → Log groups Chọn các groups như: /aws/elasticbeanstalk/... /aws/lambda/... (nếu sử dụng) Nhấp Actions → Delete log group ⚠️ CloudWatch logs có thể phát sinh chi phí theo thời gian nếu được giữ lại.\n✅ Lời khuyên cuối cùng Chờ vài phút sau khi xóa mọi thứ. Đi đến Billing Console để kiểm tra tài nguyên đang hoạt động hoặc chi phí. Nếu bạn thấy phí không mong đợi:\nSử dụng AWS Cost Explorer Kiểm tra Resource Groups hoặc Trusted Advisor 🎉 Bạn đã dọn dẹp thành công!\nCảm ơn bạn đã hoàn thành workshop. Bạn đã xây dựng một ứng dụng AWS full-stack và giờ đây đã đóng tất cả tài nguyên đang hoạt động để ngăn chặn phí.\n"
},
{
	"uri": "https://nguyenvantaiit.github.io/Workshop-AWS-deployment-With-NodeJS-ReactJS-MongoDBatlas/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://nguyenvantaiit.github.io/Workshop-AWS-deployment-With-NodeJS-ReactJS-MongoDBatlas/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]